//Shreya S Ramani~~~~~~~~~~

import java.io.*;
import java.util.Scanner;

public class Main
{
  // Define constants for ticket prices
  static final double AdultPrice = 10.0;
  static final double ChildPrice = 5.0;
  static final double SeniorPrice = 7.5;

  // Create counters to hold the amount of each type of ticket from the reservations
  static int adultTicks = 0;
  static int childTicks = 0;
  static int seniorTicks = 0;
  static int totalSeats = 0;

  // Create variables to hold total sales and total tickets
   static double totalSales = 0.0;
    static int totalTickets = 0;
    static double totalCost = 0.0;

  public static void main (String[]args) throws IOException
  {
    Scanner scanner = new Scanner (System.in);
    char[][] auditorium = loadAuditoriumData (scanner);	// Load auditorium seating data

   // int totalSeats = auditorium.length * auditorium[0].length;

    while (true)
      {
    System.out.println();
	System.out.println ("Main Menu:");
	System.out.println ("1. Reserve Seats");
	System.out.println ("2. Exit");
	System.out.print ("Enter your choice: ");
	int choice; 
	choice = scanner.nextInt();

	if (choice == 1)
	  {
	    displayAuditorium (auditorium);
	    reserveSeats (scanner, auditorium);
	    saveAuditoriumData (auditorium);
	  }
	else if (choice == 2)
	  {
	    // Exit the program
	    saveAuditoriumData (auditorium);
	    printSales (adultTicks, childTicks, seniorTicks, totalSeats, auditorium, totalSales);
	   // System.out.println ("Total Seats: " + totalSeats);
	   // System.out.println ("Total Tickets: " + totalTickets);
	   // System.out.println ("Adult Tickets: " + adultTicks);
	   // System.out.println ("Child Tickets: " + childTicks);
	   // System.out.println ("Senior Tickets: " + seniorTicks);
	   // System.out.println ("Total Sales: $" + totalSales);
	    break;
	  }
	else
	  {
	    System.out.println ("Invalid choice. Please try again.");
	  }
      }
    scanner.close ();

  }

  private static char[][] loadAuditoriumData (Scanner scanner)
  {
    //Scanner scanner = new Scanner (System.in);
    System.out.print("Enter the filename for the auditorium layout: ");
    String fileName = scanner.next ();

    try
    {
      FileInputStream inputFile = new FileInputStream (fileName);

      BufferedReader reader =
	new BufferedReader (new InputStreamReader (inputFile));
      String line;
      int numRows = 0;
      int numCols = 0;

      while ((line = reader.readLine ()) != null)
	{
	  numCols = line.length ();
	  numRows++;
	}

      char[][] auditorium = new char[numRows][numCols];

      inputFile.getChannel ().position (0);
      reader = new BufferedReader (new InputStreamReader (inputFile));

      for (int i = 0; i < numRows; i++)
	{
	  line = reader.readLine ();
	  for (int j = 0; j < numCols; j++)
	    {
	      auditorium[i][j] = line.charAt (j);
	    }
	}

      reader.close ();
      return auditorium;
    }
    catch (IOException e)
    {
      System.out.println ("Error loading auditorium data from the file.");
      e.printStackTrace ();
      return null;
    }
  }

  private static void displayAuditorium (char[][]auditorium)
  {
    System.out.println ("Auditorium Seating Chart:");
    System.out.print ("  ");	// Add a space for row labels

    // Print column labels (seat letters A-Z)
    for (char seatLetter = 'A'; seatLetter <= 'Z'; seatLetter++)
      {
	System.out.print (" " + seatLetter);
      }
    System.out.println ();	// Move to the next line

    // Loop through each row in the auditorium
    for (int row = 0; row < auditorium.length; row++)
      {
	// Print the row number (row + 1) with padding
	System.out.printf ("%2d ", row + 1);

	// Loop through each seat in the row
	for (int col = 0; col < auditorium[row].length; col++)
	  {
	    char seat = auditorium[row][col];

	    // Print the seat character with padding
	    if(seat == 'A'|| seat == 'C' || seat == 'S')
	    {
	        System.out.print ("# ");
	    }
	    else
	    {
	        System.out.print (". ");
	    }
	    
	  }

	System.out.println ();	// Move to the next line for the next row
      }
  }

  private static void reserveSeats (Scanner scanner, char[][]auditorium)
  {
    while (true)
      {
	System.out.print ("Enter row number (1-10): ");
	int selectedRow = scanner.nextInt ();

	// Validate selectedRow
	if (selectedRow < 1 || selectedRow > 10)
	  {
	    System.out.println
	      ("Invalid row number. Please enter a valid row number.");
	    continue;
	  }

	System.out.print ("Enter starting seat letter (A-Z): ");
	char selectedSeat = scanner.next ().charAt (0);

	// Validate selectedSeat
	if (selectedSeat < 'A' || selectedSeat > 'Z')
	  {
	    System.out.println
	      ("Invalid seat letter. Please enter a valid seat letter.");
	    continue;
	  }

	System.out.print ("Enter number of adult tickets: ");
	int numAdultTickets = scanner.nextInt ();

	// Validate numAdultTickets
	if (numAdultTickets < 0)
	  {
	    System.out.println
	      ("Invalid number of adult tickets. Please enter a non-negative quantity.");
	    continue;
	  }

	System.out.print ("Enter number of child tickets: ");
	int numChildTickets = scanner.nextInt ();

	// Validate numChildTickets
	if (numChildTickets < 0)
	  {
	    System.out.println
	      ("Invalid number of child tickets. Please enter a non-negative quantity.");
	    continue;
	  }

	System.out.print ("Enter number of senior tickets: ");
	int numSeniorTickets = scanner.nextInt ();

	// Validate numSeniorTickets
	if (numSeniorTickets < 0)
	  {
	    System.out.println
	      ("Invalid number of senior tickets. Please enter a non-negative quantity.");
	    continue;
	  }

	// Check if selected seats are available
	int rowIdx = selectedRow - 1;
	int seatIdx = selectedSeat - 'A';

	if (auditorium[rowIdx][seatIdx] == '.')
	  {
	    // Seats are available
	    double totalCost = calculateTicketPrice (numAdultTickets, numChildTickets,numSeniorTickets);
	   // totalSales += totalCost;
	   // adultTicks += numAdultTickets;
	   // childTicks += numChildTickets;
	   // seniorTicks += numSeniorTickets;
	   // totalTickets += (numAdultTickets + numChildTickets + numSeniorTickets);

	    // Update the auditorium layout
	    for (int i = 0; i < numAdultTickets; i++)
	      {
		auditorium[rowIdx][seatIdx + i] = 'A';
	      }
	    for (int i = 0; i < numChildTickets; i++)
	      {
		auditorium[rowIdx][seatIdx + numAdultTickets + i] = 'C';
	      }
	    for (int i = 0; i < numSeniorTickets; i++)
	      {
		auditorium[rowIdx][seatIdx + numAdultTickets + numChildTickets + i] = 'S';
	      }

	    System.out.println ("Seats reserved successfully!");
	    System.out.println ("Total Cost: $" + totalCost);
	  }
	else
	  {
	    // Offer best available seats and handle accordingly
		int[] bestSeats = findBestAvailableSeats (auditorium, numAdultTickets + numChildTickets + numSeniorTickets, selectedRow - 1);
		if (bestSeats[1] != 99)
		  {
		    // Seats are available
		    double totalCost = calculateTicketPrice (numAdultTickets, numChildTickets,numSeniorTickets);
		  //  totalSales += totalCost;
		  //  adultTicks += numAdultTickets;
		  //  childTicks += numChildTickets;
		  //  seniorTicks += numSeniorTickets;
		  //  totalTickets += (numAdultTickets + numChildTickets + numSeniorTickets);

		    // Update the auditorium layout with best available seats
		    for (int i = 0; i < numAdultTickets; i++)
		      {
			auditorium[bestSeats[0]][bestSeats[1] + i] = 'A';
		      }
		    for (int i = 0; i < numChildTickets; i++)
		      {
			auditorium[bestSeats[0]][bestSeats[1] + numAdultTickets + i] = 'C';
		      }
		    for (int i = 0; i < numSeniorTickets; i++)
		      {
			auditorium[bestSeats[0]][bestSeats[1] + numAdultTickets + numChildTickets + i] = 'S';
		      }
		      
		 	// Display the auditorium with updated reservations
	        displayAuditorium (auditorium);
	            char startSeat = (char) ('A' + bestSeats[1]);
                char endSeat = (char) ('A' + bestSeats[1] + numAdultTickets + numChildTickets + numSeniorTickets - 1);
                
                System.out.println("Chosen seats are not available with your reservation requirements. Instead:");
                System.out.println("Best Seats: " + selectedRow + startSeat + " - " + selectedRow + endSeat);

		    System.out.println ("Total Cost: $" + totalCost);
		   
		  }
		else
		  {
		    System.out.println ("No best available seats found.");
		  }
	        System.out.println("Would you like to reserve the best available seats instead? (Y/N): ");
	         String choice = scanner.next ();
	    
	    if (choice.equalsIgnoreCase ("Y"))
	      {
	           System.out.println("Best available seats reserved successfully!");
	      }
	    else
	      {
	            for (int i = 0; i < numAdultTickets; i++)
		         {
		        	auditorium[bestSeats[0]][bestSeats[1] + i] = '.';
		         }
		        for (int i = 0; i < numChildTickets; i++)
		        {
		        	auditorium[bestSeats[0]][bestSeats[1] + numAdultTickets + i] = '.';
		         }
		        for (int i = 0; i < numSeniorTickets; i++)
		        {
		    	    auditorium[bestSeats[0]][bestSeats[1] + numAdultTickets + numChildTickets + i] = '.';
		        }
	        	System.out.println ("Reservation canceled.");
	      }
	  }

	    break;		// Exit reservation loop
	  
      }
  }

  private static int[] findBestAvailableSeats (char[][]auditorium, int numSeats, int selectedRow)
{
  // Implement logic to find the best available seats
  // For example, you can search for consecutive empty seats in rows
  double bestDistance = 99;
  int bestIndex = 99;
  double middleSeat = numSeats / 2.0;
  // 20 needs to be changed to a variable of the actual size
  double middleRow = auditorium[0].length / 2.0;
  int i;
 			
for (int seat = 0; seat < auditorium[0].length - numSeats + 1; seat++)
 {
    
   boolean available = true;
   for (i = 0; i < numSeats; i++)
     {
       if (auditorium[selectedRow][seat + i] != '.')
       {
            available = false;
            break;
       }
     }


   if (available)
   {
      double temp = Math.abs((seat + middleSeat) - middleRow); // FIX: Changed to seat + middleSeat
      if (bestDistance > temp)
      {
         bestDistance = temp;
         bestIndex = seat;
      }
   }
 }


 return new int[]
       {
       selectedRow, bestIndex
      
       };
}


  private static void saveAuditoriumData (char[][]auditorium)
  {
    try (BufferedWriter writer = new BufferedWriter (new FileWriter ("A1.txt")))
    {
      for (int row = 0; row < auditorium.length; row++)
	    {
	        for (int col = 0; col < auditorium[row].length; col++)
	     {
	      writer.write (auditorium[row][col]);
	        }
	  writer.newLine ();	// Move to the next line after each row
	}

    //   System.out.println ("Auditorium data saved to A1.txt.");
    } 
    catch (IOException e)
    {
      System.err.println ("Error saving auditorium data to file: " + e.getMessage ());
    }
  }

  private static double calculateTicketPrice (int adultTickets,int childTickets,int seniorTickets)
  {
    double total = (AdultPrice * adultTickets) + (ChildPrice * childTickets) + (SeniorPrice * seniorTickets);
    return total;
  }
  
  private static void printSales (int adultTickets,int childTickets,int seniorTickets, int totalSeats, char[][]auditorium, double totalSales)
  {
    for(int i = 0; i < auditorium.length; i++)
    {
        for(int j = 0; j < auditorium[0].length; j++)
        {
            if(auditorium[i][j] == 'A')
            {
                adultTickets++;
                totalTickets++;
            }
            else if(auditorium[i][j] == 'C')
            {
                childTickets++;
                totalTickets++;
            }
            else if(auditorium[i][j] == 'S')
            {
                seniorTickets++;
                totalTickets++;
            }
            totalSeats++;
        }
        
    }
    totalSales = calculateTicketPrice(adultTickets, childTickets, seniorTickets);
    
            System.out.println ("Total Seats: " + totalSeats);
        	  System.out.println ("Total Tickets: " + totalTickets);
        	    System.out.println ("Adult Tickets: " + adultTickets);
        	   System.out.println ("Child Tickets: " + childTickets);
        	    System.out.println ("Senior Tickets: " + seniorTickets);
        	    System.out.print ("Total Sales: $");
        	   System.out.printf("%.2f\n", totalSales);
  }
  
}
